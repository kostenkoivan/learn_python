#решения задач курса stepik https://stepik.org/course/67/syllabus
#1.8.1
#Тимофей обычно спит ночью X часов и устраивает себе днем тихий час на 
#Y минут. Определите, сколько всего минут Тимофей спит в сутки.

X = int(input())
Y = int(input())
print(X*60 + Y)

#1.8.2
#Коля каждый день ложится спать ровно в полночь и недавно узнал, что оптимальное время для его сна составляет 
#X минут. Коля хочет поставить себе будильник так, чтобы он прозвенел ровно через 
#X минут после полуночи, однако для этого необходимо указать время сигнала в формате часы, минуты. Помогите Коле определить, на какое время завести будильник.

x = int(input())
print(x//60)
print(x%60)

#1.8.3
#Катя узнала, что ей для сна надо X минут. В отличие от Коли, Катя ложится спать после полуночи в 
# H часов и M минут. Помогите Кате определить, на какое время ей поставить будильник, чтобы он прозвенел ровно через X минут после того, как она ляжет спать.
#На стандартный ввод, каждое в своей строке, подаются значения X, H и M. Гарантируется, что Катя должна проснуться в тот же день, что и заснуть. Программа должна выводить время, на которое нужно поставить будильник: в первой строке часы, во второй — минуты.

x =  int(input())
h =  int(input())
m = int(input())
print((x + h*60 + m)//60)
print((x + h*60 + m)%60)

#1.10.1
#Из передачи “Здоровье” Аня узнала, что рекомендуется спать хотя бы A часов в сутки, но пересыпать тоже вредно и не стоит спать более B часов. Сейчас Аня спит 
#H часов в сутки. Если режим сна Ани удовлетворяет рекомендациям передачи “Здоровье”, выведите “Это нормально”. Если Аня спит менее A часов, выведите “Недосып”, если же более B часов, то выведите “Пересып”.
#Получаемое число A всегда меньше либо равно B.

a = int(input())
b = int(input())
c = int(input())
if(c >= a and c <= b):
    print("Это нормально")
elif(c >= a and c > b):
    print("Пересып")
else:
    print("Недосып")

#1.10.2
#Требуется определить, является ли данный год високосным.
#Напомним, что високосными годами считаются те годы, порядковый номер которых либо кратен 4, но при этом не кратен 100, либо кратен 400 (например, 2000-й год являлся високосным, а 2100-й будет невисокосным годом).
#Программа должна корректно работать на числах 1900≤n≤3000.
#Выведите "Високосный" в случае, если считанный год является високосным и "Обычный" в обратном случае (не забывайте проверять регистр выводимых программой символов).

year = int(input())
if((year%4 == 0 and year%100 != 0) or year%400 == 0):
    print("Високосный")
else:
    print("Обычный")

#1.12.1
#В то далёкое время, когда Паша ходил в школу, ему очень не нравилась формула Герона для вычисления площади треугольника, так как казалась слишком сложной. В один прекрасный момент Павел решил избавить всех школьников от страданий и написать и распространить по школам программу, вычисляющую площадь треугольника по трём сторонам.
#Одна проблема: так как эта формула не нравилась Павлу, он её не запомнил. Помогите ему завершить доброе дело и напишите программу, вычисляющую площадь треугольника по переданным длинам трёх его сторон по формуле Герона:

from math import sqrt
a = int(input())
b = int(input())
c = int(input())
p = (a+b+c)/2
print(sqrt(p*(p-a)*(p-b)*(p-c)))

#1.12.2
#Напишите программу, принимающую на вход целое число, которая выводит True, если переданное значение попадает в интервал 
#(−15,12]∪(14,17)∪[19,+∞) и False в противном случае (регистр символов имеет значение).

a =  int(input())
print((a > -15 and a<= 12)or(a > 14 and a < 17)or(a >=19))

#1.12.3
#Напишите простой калькулятор, который считывает с пользовательского ввода три строки: первое число, второе число и операцию, после чего применяет операцию к введённым числам ("первое число" "операция" "второе число") и выводит результат на экран.
#Поддерживаемые операции: +, -, /, *, mod, pow, div, где
#mod — это взятие остатка от деления,
#pow — возведение в степень,
#div — целочисленное деление.
#Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!".
#Обратите внимание, что на вход программе приходят вещественные числа.

a = float(input())
b = float(input())
c = input()
if(c == "+"):
    print(a+b)
elif(c == "-"):
    print(a-b)
elif(c == "/"):
    if(b == 0):
       print("Деление на 0!")
    else:
        print(a/b)
elif(c == "*"):
    print(a*b)
elif(c == "mod"):
    if(b == 0):
        print("Деление на 0!")
    else:
        print(a%b)
elif(c == "pow"):
    print(a**b)
elif(c == "div"):
    if(b == 0):
        print("Деление на 0!")
    else:
        print(a//b)

#1.12.4
#Жители страны Малевии часто экспериментируют с планировкой комнат. Комнаты бывают треугольные, прямоугольные и круглые. Чтобы быстро вычислять жилплощадь, требуется написать программу, на вход которой подаётся тип фигуры комнаты и соответствующие параметры, которая бы выводила площадь получившейся комнаты.
#Для числа π в стране Малевии используют значение 3.14.

from math import sqrt
room_type = input()
if(room_type == "прямоугольник"):
    a = int(input())
    b = int(input())
    print(a*b)
elif(room_type == "треугольник"):
    a = int(input())
    b = int(input())
    c = int(input())
    p = (a+b+c)/2
    print(sqrt(p*(p-a)*(p-b)*(p-c)))
elif(room_type == "круг"):
    r = int(input())
    print(3.14 * (r**2))

#1.12.5
#Напишите программу, которая получает на вход три целых числа, по одному числу в строке, и выводит на консоль в три строки сначала максимальное, потом минимальное, после чего оставшееся число.
#На ввод могут подаваться и повторяющиеся числа.

a = int(input())
b = int(input())
c = int(input())
ans_a = max(max(a,b),c)
ans_b = min(min(a,b),c)
print(ans_a)
print(ans_b)
print(a+b+c-ans_a-ans_b)

#1.12.6
#В институте биоинформатики по офису передвигается робот. Недавно студенты из группы программистов написали для него программу, по которой робот, когда заходит в комнату, считает количество программистов в ней и произносит его вслух: "n программистов".
#Для того, чтобы это звучало правильно, для каждого n нужно использовать верное окончание слова.
#Напишите программу, считывающую с пользовательского ввода целое число n (неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.
#В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи, как минимум до 1000 человек.

a = int(input())
a_a = a % 10
if (a_a == 1 and (((a-11)%100) != 0)):
    print(str(a) + " программист")
elif(a_a in (2, 3, 4) and a%100 not in (12,13,14)):
    print(str(a) + " программиста")
else:
    print(str(a) + " программистов")

#1.12.7
#Паша очень любит кататься на общественном транспорте, а получая билет, сразу проверяет, счастливый ли ему попался. Билет считается счастливым, если сумма первых трех цифр совпадает с суммой последних трех цифр номера билета.
#Однако Паша очень плохо считает в уме, поэтому попросил вас написать программу, которая проверит равенство сумм и выведет "Счастливый", если суммы совпадают, и "Обычный", если суммы различны.
#На вход программе подаётся строка из шести цифр.
#Выводить нужно только слово "Счастливый" или "Обычный", с большой буквы.

a = int(input())
 
first_sum = a//1000%10 + a//10000%10 + a//100000
last_sum = a%1000//100 + a%100//10 + a%10 
if(first_sum == last_sum):
    print("Счастливый")
else:
    print("Обычный")

#2.1.1
#Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.

i = 0
while i < 5:
    print('*')
    if i % 2 == 0:
        print('**')
    if i > 2:
        print('***')
    i = i + 1

#2.1.2
#В Институте биоинформатики между информатиками и биологами устраивается соревнование. Победителям соревнования достанется большой и вкусный пирог. В команде биологов 
#a человек, а в команде информатиков — b человек.
#Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде, выигравшей соревнование, при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога. И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.

#Напишите программу, которая помогает найти это число.
#Программа должна считывать размеры команд (два положительных целых числа a и b, каждое число вводится на отдельной строке) и выводить наименьшее число d, которое делится на оба этих числа без остатка.

a = int(input())
b = int(input())
m = a * b
while a != 0 and b != 0:
    if a > b:
        a %= b
    else:
        b %= a
print(m // (a + b))

#2.2.1
#Напишите программу, которая считывает целые числа с консоли по одному числу в строке.

#Для каждого введённого числа проверить:
#если число меньше 10, то пропускаем это число;
#если число больше 100, то прекращаем считывать числа;
#в остальных случаях вывести это число обратно на консоль в отдельной строке.

a = int(input())
while (a<=100):
    if(a>=10):
        print(a)
    a = int(input())

#2.3.1
#Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.
#Напишите программу, на вход которой даются четыре числа a, b,c и d, каждое в своей строке. Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a;b] на все числа отрезка [c;d].
#Числа a,b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.
#Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции. Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы.

a = int(input())
b = int(input())
c = int(input())
d = int(input())
e = " "
for x in range (c,d+1):
    e = e + '\t' + str(x)
print(e)
for x in range(a,b+1):
    e = str(x) 
    for y in range(c,d+1):
        e = e + '\t' + str(x*y)
    print(e)

#2.3.2
#Напишите программу, которая считывает с клавиатуры два числа a и b, считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a;b], которые кратны числу 3

a = int(input())
b = int(input())
sum = 0
count = 0
for x in range(a,b+1):
    if (x%3 == 0):
        sum+=x
        count+=1
print(sum/count)

#2.4.1
#GC-состав является важной характеристикой геномных последовательностей и определяется как процентное соотношение суммы всех гуанинов и цитозинов к общему числу нуклеиновых оснований в геномной последовательности.
#Напишите программу, которая вычисляет процентное содержание символов G (гуанин) и C (цитозин) в введенной строке (программа не должна зависеть от регистра вводимых символов).

string = input()
x = string.lower()
count_g = 0
size_str = len(x)
for item in x:
    if item == 'g' or item == 'c':
        count_g = count_g + 1
print(count_g/size_str * 100) 

#2.4.2
#Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
#Кодирование осуществляется следующим образом: s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.
#Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.

x_string = input()
string = x_string + "1"
count = 1
ans = ""
if(len(string) == 1):
    print(string + "1")

for i in range(len(string)-1):
    if (string[i] == string[i+1]):
        count +=1
    else:
        ans = ans + string[i] + str(count)
        count = 1
print(ans)

#2.5.1
#Напишите программу, на вход которой подается одна строка с целыми числами. Программа должна вывести сумму этих чисел.
#Используйте метод split строки. 

a = [int (i) for i in input().split(" ")]
print(sum(a))

#2.5.2
#Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
#Если на вход пришло только одно число, надо вывести его же.
#Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

a = [int (i) for i in input().split(" ")]
result = []
if len(a) == 1:
    print(a[0])
else:
    for i in range(len(a)):
        if i == 0:
            sum = a[1] + a[-1]
            result.append(sum)
        elif i == len(a) - 1:
            sum = a[len(a) - 2] + a[0]
            result.append(sum)
        else:
            sum = a[i-1] + a[i+1]
            result.append(sum)
    print(*result)

#2.5.3
#Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну строку значения, которые встречаются в нём более одного раза.
#Для решения задачи может пригодиться метод sort списка.
#Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.

a = [int (i) for i in input().split(" ")]
a.sort()
a.append("!")
result = []
if(len(a)==1):
    print()
elif len(a)==2:
    if(a[0]==a[1]):
        print(a[0])
else:
    for i in range(1,len(a)-1):
        if(a[i]!=a[i+1] and a[i]==a[i-1]):
            result.append(a[i])
    print(*result)

#2.6.1
#Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
#Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
#В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.

a = int(input())
sum = a
sum_2 = a**2
while( sum!=0 ):
    a = int(input())
    sum+=a
    sum_2+=a**2
print(sum_2)

#2.6.2
#Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
#Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.

a = int(input())
ans = []
temp = []
for x in range(a+1):
    temp = [x]*x
    ans+=temp
print(*ans[0:a])

#2.6.3
#Напишите программу, которая считывает список чисел lst из первой строки и число 
#x из второй строки, которая выводит все позиции, на которых встречается число x в переданном списке lst.

#Позиции нумеруются с нуля, если число x не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы).
#Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.

a = [int (i) for i in input().split(" ")]
x = int(input())
result = []
for i in range(len(a)):
    if a[i] == x:
        result.append(i)
if(len(result)==0):
    print("Отсутствует")
else:
    print(*result)

#2.6.4
#Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк. После последней строки матрицы идёт строка, содержащая только строку "end" (без кавычек, см. Sample Input).
#Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с противоположной стороны матрицы.
#В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.

a = []
b = input()
while b != "end":
    a.append(b.split())
    b = input()
for i in range(len(a)):
    for j in range(len(a[i])):
        print(int(a[i-1][j]) + int(a[i-len(a)+1][j]) + int(a[i][j-1]) + int(a[i][j-len(a[i])+1]), end =" ")
    print()

#2.6.5
#Выведите таблицу размером n×n, заполненную числами от 1 до n^2 по спирали, выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере (здесь n=5)

def spiral(n):
    dx,dy = 1,0           
    x,y = 0,0              
    myarray = [[None]* n for j in range(n)]
    for i in range(1,n**2+1):
        myarray[x][y] = i
        nx,ny = x+dx, y+dy
        if 0<=nx<n and 0<=ny<n and myarray[nx][ny] == None:
            x,y = nx,ny
        else:
            dx,dy = -dy,dx
            x,y = x+dx, y+dy
    return myarray
 
def printspiral(myarray):
    n = range(len(myarray))
    for y in n:
        for x in n:
            print (myarray[x][y],end=' ')
        print()

n = int(input())
printspiral(spiral(n))

#3.1.1
#Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой


def f(n):
    if n <= -2 :
        return 1-(n+2)**2
    if -2 < n <= 2:
        return n / -2
    if 2 < n:
        return (n-2)**2 + 1
    
#3.1.2
#Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два. Функция не должна ничего возвращать, требуется только изменение переданного списка, например:

def modify_list(l):
    le = len(l)-1
    i = le
    while i!=-1:
        if l[i]%2:
            del l[i]
        else:
            l[i]=l[i]//2
        i -=1
    return

#3.2.1
#Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value.

#Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
#Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2∗key. Если и ключа 2∗key нет, то нужно добавить ключ 2∗key в словарь и сопоставить ему список из переданного элемента [value].
#Требуется реализовать только эту функцию, кода вне её не должно быть.

def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key*2 in d:
        d[key*2].append(value)
    else:
        d[key*2]  = [value]
    return

#3.2.2
#Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
#Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
#Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
#Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.

str = input()
str = str.lower()
mas_str = str.split()
result = {}
for elem in mas_str:
    if elem in result:
        result[elem] +=1
    else:
        result[elem] = 1
for elem in result:
    print(elem, result[elem])

#3.2.3
#Напишите программу, которая считывает строку с числом n, которое задаёт количество чисел, которые нужно считать. Далее считывает n строк с числами xi, по одному числу в каждой строке. Итого будет n+1 строк.
#При считывании числа xi программа должна на отдельной строке вывести значение f(xi). Функция f(x) уже реализована и доступна для вызова. 
#Функция вычисляется достаточно долго и зависит только от переданного аргумента x. Для того, чтобы уложиться в ограничение по времени, нужно избежать повторного вычисления значений.

num = int(input())
book = {}
for i in range(num):
    n = int(input())
    if n in book:
        print(book[n])
    else:
        book[n] = f(n)
        print(book[n])

#3.4.1
#На прошлой неделе мы сжимали строки, используя кодирование повторов. Теперь нашей задачей будет восстановление исходной строки обратно.
#Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью кодирования повторов, и производит обратную операцию, получая исходный текст.
#Запишите полученный текст в файл и прикрепите его, как ответ на это задание.
#В исходном тексте не встречаются цифры, так что код однозначно интерпретируем.
#Примечание. Это первое задание типа Dataset Quiz. В таких заданиях после нажатия "Start Quiz" у вас появляется ссылка "download your dataset". Используйте эту ссылку для того, чтобы загрузить файл со входными данными к себе на компьютер. Запустите вашу программу, используя этот файл в качестве входных данных. Выходной файл, который при этом у вас получится, надо отправить в качестве ответа на эту задачу.

import sys
import os
import re
result = []
alpha = []
ans = ""
with open("D:\prog\input.txt") as inp:
    result = inp.readline().strip()
for i in range(0,len(result)):
    if result[i].isalpha():
        alpha.append(result[i])
numbers = re.split("Q|W|E|R|T|Y|U|I|O|P|A|S|D|F|G|H|J|K|L|Z|X|C|V|B|N|M|q|w|e|r|t|y|u|i|o|p|a|s|d|f|g|h|j|k|l|z|x|c|v|b|n|m", result)
numbers.pop(0)
for i in range(len(alpha)):
    ans+=alpha[i]*int(numbers[i])
print(ans)

#3.5.1
#Напишите программу, которая подключает модуль math и, используя значение числа 
#π из этого модуля, находит для переданного ей на стандартный ввод радиуса круга периметр этого круга и выводит его на стандартный вывод.

import math
r = float(input())
print(2*math.pi*r)

#3.5.2
#Напишите программу, которая запускается из консоли и печатает значения всех переданных аргументов на экран (имя скрипта выводить не нужно). Не изменяйте порядок аргументов при выводе.
#Для доступа к аргументам командной строки программы подключите модуль sys и используйте переменную argv из этого модуля.

import sys
s = ''
s2 = ''
for i in range(1,len(sys.argv)):
    s = s + sys.argv[i]+' '
s2 = s
print(s2,end=' ')

#3.7.1
#Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.
#За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
#Формат ввода следующий:В первой строке указано целое число n — количество завершенных игр.
#После этого идет n строк, в которых записаны результаты игры в следующем формате:
#Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой
#Вывод программы необходимо оформить следующим образом:
#Команда:Всего_игр Побед Ничьих Поражений Всего_очков
#Порядок вывода команд произвольный.

num = int(input())
inp = []
result = {}
for i in range(num):
    inp = input().split(";")
    team_one = inp[0]
    team_one_score = int(inp[1])
    team_two = inp[2]
    team_two_score = int(inp[3])

    if team_one not in result:
        result[team_one] = [0,0,0,0,0]

    if team_two not in result:
        result[team_two] = [0,0,0,0,0]

    if(team_one_score > team_two_score):
        result[team_one][0]+=1
        result[team_two][0]+=1
        result[team_one][1]+=1
        result[team_two][3]+=1
        result[team_one][4]+=3
    elif(team_one_score < team_two_score):
        result[team_one][0]+=1
        result[team_two][0]+=1
        result[team_one][3]+=1
        result[team_two][1]+=1
        result[team_two][4]+=3
    else:
        result[team_one][0]+=1
        result[team_two][0]+=1
        result[team_one][2]+=1
        result[team_two][2]+=1
        result[team_one][4]+=1
        result[team_two][4]+=1
for item in result:
    print(item + ":", *result[item])

#3.7.3
#Простейшая система проверки орфографии может быть основана на использовании списка известных слов.
#Если введённое слово не найдено в этом списке, оно помечается как "ошибка".
#Попробуем написать подобную систему.
#На вход программе первой строкой передаётся количество d известных нам слов, после чего на d строках указываются эти слова. Затем передаётся количество l строк текста для проверки, после чего l строк текста.
#Выведите уникальные "ошибки" в произвольном порядке. Работу производите без учёта регистра.

num = int(input())
slova = []
result = {}
error = set()
for i in range(num):
    slova.append(input().lower())
num_num = int(input())
for i in range(num_num):
    inp = input().split()
    for item in inp:
        if item.lower() not in slova:
            error.add(item.lower())
for item in error:
    print(item)